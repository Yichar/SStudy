class Solution {public:    struct node {        int xx,yy;    };    int dir[4][2] = {0,1,1,0,-1,0,0,-1};    queue<node> Q;    int n,m;    void solve(vector<vector<char>>& board) {               n = board.size();        if(n == 0) return;        m = board[0].size();        if( n == m && n == 1)            return ;             //   int check[n][m] = {0};        for( int i = 0; i < n; i++){   //第一列和最后一列                if(board[i][0] == 'O' ) {                    board[i][0] = 'E';                    Q.push(node{i,0});                }                if(board[i][m-1] == 'O') {                    board[i][m-1] = 'E';                    Q.push(node{i,m-1});                }        }        for( int i = 0; i < m - 1; i++){   // 第一行最后一行 排除第一列和最后一列            if(board[0][i] == 'O') {                    board[0][i] = 'E';                    Q.push(node{0,i});            }             if(board[n-1][i] == 'O') {                    board[n-1][i] = 'E';                    Q.push(node{n-1,i});            }        }        while(!Q.empty()){            node temp = Q.front();            Q.pop();            for( int i =0; i < 4; i++){                int xx = temp.xx + dir[i][0];                int yy = temp.yy + dir[i][1];                if( xx < 0 || yy < 0 || xx == n || yy == m || board[xx][yy] != 'O')                     continue;                board[xx][yy] = 'E';                Q.push(node{xx,yy});            }        }            for(int i = 0; i < n; i++){            for(int j = 0; j < m; j++){                if(board[i][j] == 'O') {                    Q.push(node{i,j});                    board[i][j] = 'X';                    while(!Q.empty()){                         node temp = Q.front();                        Q.pop();                        for( int i =0; i < 4; i++){                            int xx = temp.xx + dir[i][0];                            int yy = temp.yy + dir[i][1];                            if( xx < 0 || yy < 0 || xx == n || yy == m || board[xx][yy] != 'O')                                 continue;                            board[xx][yy] = 'X';                            Q.push(node{xx,yy});                        }                    }                }            }        }         for(int i = 0; i < n; i++){            for(int j = 0; j < m; j++){                 if(board[i][j] == 'E')                         board[i][j] = 'O';                }         }    }};